% [Part3] This script fits data with a sigmoid function

clear all;      %clear workspace
clc;            %clear command window
close all;      %close figures
 

% original data of number of facebook member
members=[0, 12, 24, 28, 34, 44, 49, 52, 55, 57, 60, 62, 67, 69, 73, 74, 79, 82, 87, 89, 92, 95, 98, 102, 104, 110, 111, 116, 119, 122, 125, 132;,...
    1, 5.5, 12, 20, 50, 100, 150, 200, 250, 300, 350, 450, 500, 550, 600, 650, 750, 800, 845, 901, 955, 1000, 1060, 1100, 1150, 1184, 1230, 1320, 1350, 1390, 1441, 1550];

% define x and y
X=members(1,:);
Y=members(2,:);


% To fit the data to a sigmoid function, 
% we have to minimize a sum of squared error between the original data points and the sigmoid function
% By using gradient descent, we can get a minimized the sum of squared errors which is called loss function.


% From the condition, we can get "A"
% condition : x=0 and f(0)=A
% From the data, A is 1

%% (a) 3D gradient descent

% Get a Loss function "f" (=Sum of squared errors for all data points)
f=0;
syms f B C D                                                   % define f,B,C,D as symbolic variables
for k=1:32;                                                    % total number of months
    X_k=X(k); Y_k=Y(k);                                        % X and Y values according to k
    f= f + ((Y_k - (D + (1- D)./(1+  (X_k./C).^B ))).^2);      % sum of squared error for all data points
end



% Get three gradient descent funtions by using numerical differentiation
% As there exists 3 parameters to fit, we use a 3D gradient descent

% g1=diff(f,B,1); %dF/dB
% g2=diff(f,C,1); %dF/dC
% g3=diff(f,D,1); %dF/dD


% function "diff" is not defined with funtion_handdle
% Threfore it's impossible to get a numericla differentiation with function_handdle
% So I manually copy and paste the result of the numerical differentiation


% 3D Gradient descent functions
f = @(B,C,D) ((D - 1)/(0^B + 1) - D + 1)^2 + ((D - 1)/((12/C)^B + 1) - D + 11/2)^2 + ((D - 1)/((24/C)^B + 1) - D + 12)^2 + ((D - 1)/((28/C)^B + 1) - D + 20)^2 + ((D - 1)/((34/C)^B + 1) - D + 50)^2 + ((D - 1)/((44/C)^B + 1) - D + 100)^2 + ((D - 1)/((49/C)^B + 1) - D + 150)^2 + ((D - 1)/((52/C)^B + 1) - D + 200)^2 + ((D - 1)/((55/C)^B + 1) - D + 250)^2 + ((D - 1)/((57/C)^B + 1) - D + 300)^2 + ((D - 1)/((60/C)^B + 1) - D + 350)^2 + ((D - 1)/((62/C)^B + 1) - D + 450)^2 + ((D - 1)/((67/C)^B + 1) - D + 500)^2 + ((D - 1)/((69/C)^B + 1) - D + 550)^2 + ((D - 1)/((73/C)^B + 1) - D + 600)^2 + ((D - 1)/((74/C)^B + 1) - D + 650)^2 + ((D - 1)/((79/C)^B + 1) - D + 750)^2 + ((D - 1)/((82/C)^B + 1) - D + 800)^2 + ((D - 1)/((87/C)^B + 1) - D + 845)^2 + ((D - 1)/((89/C)^B + 1) - D + 901)^2 + ((D - 1)/((92/C)^B + 1) - D + 955)^2 + ((D - 1)/((95/C)^B + 1) - D + 1000)^2 + ((D - 1)/((98/C)^B + 1) - D + 1060)^2 + ((D - 1)/((102/C)^B + 1) - D + 1100)^2 + ((D - 1)/((104/C)^B + 1) - D + 1150)^2 + ((D - 1)/((110/C)^B + 1) - D + 1184)^2 + ((D - 1)/((111/C)^B + 1) - D + 1230)^2 + ((D - 1)/((116/C)^B + 1) - D + 1320)^2 + ((D - 1)/((119/C)^B + 1) - D + 1350)^2 + ((D - 1)/((122/C)^B + 1) - D + 1390)^2 + ((D - 1)/((125/C)^B + 1) - D + 1441)^2 + ((D - 1)/((132/C)^B + 1) - D + 1550)^2;
g1= @(B,C,D) - (2*log(12/C)*(12/C)^B*(D - 1)*((D - 1)/((12/C)^B + 1) - D + 11/2))/((12/C)^B + 1)^2 - (2*log(24/C)*(24/C)^B*(D - 1)*((D - 1)/((24/C)^B + 1) - D + 12))/((24/C)^B + 1)^2 - (2*log(28/C)*(28/C)^B*(D - 1)*((D - 1)/((28/C)^B + 1) - D + 20))/((28/C)^B + 1)^2 - (2*log(34/C)*(34/C)^B*(D - 1)*((D - 1)/((34/C)^B + 1) - D + 50))/((34/C)^B + 1)^2 - (2*log(44/C)*(44/C)^B*(D - 1)*((D - 1)/((44/C)^B + 1) - D + 100))/((44/C)^B + 1)^2 - (2*log(49/C)*(49/C)^B*(D - 1)*((D - 1)/((49/C)^B + 1) - D + 150))/((49/C)^B + 1)^2 - (2*log(52/C)*(52/C)^B*(D - 1)*((D - 1)/((52/C)^B + 1) - D + 200))/((52/C)^B + 1)^2 - (2*log(55/C)*(55/C)^B*(D - 1)*((D - 1)/((55/C)^B + 1) - D + 250))/((55/C)^B + 1)^2 - (2*log(57/C)*(57/C)^B*(D - 1)*((D - 1)/((57/C)^B + 1) - D + 300))/((57/C)^B + 1)^2 - (2*log(60/C)*(60/C)^B*(D - 1)*((D - 1)/((60/C)^B + 1) - D + 350))/((60/C)^B + 1)^2 - (2*log(62/C)*(62/C)^B*(D - 1)*((D - 1)/((62/C)^B + 1) - D + 450))/((62/C)^B + 1)^2 - (2*log(67/C)*(67/C)^B*(D - 1)*((D - 1)/((67/C)^B + 1) - D + 500))/((67/C)^B + 1)^2 - (2*log(69/C)*(69/C)^B*(D - 1)*((D - 1)/((69/C)^B + 1) - D + 550))/((69/C)^B + 1)^2 - (2*log(73/C)*(73/C)^B*(D - 1)*((D - 1)/((73/C)^B + 1) - D + 600))/((73/C)^B + 1)^2 - (2*log(74/C)*(74/C)^B*(D - 1)*((D - 1)/((74/C)^B + 1) - D + 650))/((74/C)^B + 1)^2 - (2*log(79/C)*(79/C)^B*(D - 1)*((D - 1)/((79/C)^B + 1) - D + 750))/((79/C)^B + 1)^2 - (2*log(82/C)*(82/C)^B*(D - 1)*((D - 1)/((82/C)^B + 1) - D + 800))/((82/C)^B + 1)^2 - (2*log(87/C)*(87/C)^B*(D - 1)*((D - 1)/((87/C)^B + 1) - D + 845))/((87/C)^B + 1)^2 - (2*log(89/C)*(89/C)^B*(D - 1)*((D - 1)/((89/C)^B + 1) - D + 901))/((89/C)^B + 1)^2 - (2*log(92/C)*(92/C)^B*(D - 1)*((D - 1)/((92/C)^B + 1) - D + 955))/((92/C)^B + 1)^2 - (2*log(95/C)*(95/C)^B*(D - 1)*((D - 1)/((95/C)^B + 1) - D + 1000))/((95/C)^B + 1)^2 - (2*log(98/C)*(98/C)^B*(D - 1)*((D - 1)/((98/C)^B + 1) - D + 1060))/((98/C)^B + 1)^2 - (2*log(102/C)*(102/C)^B*(D - 1)*((D - 1)/((102/C)^B + 1) - D + 1100))/((102/C)^B + 1)^2 - (2*log(104/C)*(104/C)^B*(D - 1)*((D - 1)/((104/C)^B + 1) - D + 1150))/((104/C)^B + 1)^2 - (2*log(110/C)*(110/C)^B*(D - 1)*((D - 1)/((110/C)^B + 1) - D + 1184))/((110/C)^B + 1)^2 - (2*log(111/C)*(111/C)^B*(D - 1)*((D - 1)/((111/C)^B + 1) - D + 1230))/((111/C)^B + 1)^2 - (2*log(116/C)*(116/C)^B*(D - 1)*((D - 1)/((116/C)^B + 1) - D + 1320))/((116/C)^B + 1)^2 - (2*log(119/C)*(119/C)^B*(D - 1)*((D - 1)/((119/C)^B + 1) - D + 1350))/((119/C)^B + 1)^2 - (2*log(122/C)*(122/C)^B*(D - 1)*((D - 1)/((122/C)^B + 1) - D + 1390))/((122/C)^B + 1)^2 - (2*log(125/C)*(125/C)^B*(D - 1)*((D - 1)/((125/C)^B + 1) - D + 1441))/((125/C)^B + 1)^2 - (2*log(132/C)*(132/C)^B*(D - 1)*((D - 1)/((132/C)^B + 1) - D + 1550))/((132/C)^B + 1)^2;
g2= @(B,C,D) (24*B*(12/C)^(B - 1)*(D - 1)*((D - 1)/((12/C)^B + 1) - D + 11/2))/(C^2*((12/C)^B + 1)^2) + (48*B*(24/C)^(B - 1)*(D - 1)*((D - 1)/((24/C)^B + 1) - D + 12))/(C^2*((24/C)^B + 1)^2) + (56*B*(28/C)^(B - 1)*(D - 1)*((D - 1)/((28/C)^B + 1) - D + 20))/(C^2*((28/C)^B + 1)^2) + (68*B*(34/C)^(B - 1)*(D - 1)*((D - 1)/((34/C)^B + 1) - D + 50))/(C^2*((34/C)^B + 1)^2) + (88*B*(44/C)^(B - 1)*(D - 1)*((D - 1)/((44/C)^B + 1) - D + 100))/(C^2*((44/C)^B + 1)^2) + (98*B*(49/C)^(B - 1)*(D - 1)*((D - 1)/((49/C)^B + 1) - D + 150))/(C^2*((49/C)^B + 1)^2) + (104*B*(52/C)^(B - 1)*(D - 1)*((D - 1)/((52/C)^B + 1) - D + 200))/(C^2*((52/C)^B + 1)^2) + (110*B*(55/C)^(B - 1)*(D - 1)*((D - 1)/((55/C)^B + 1) - D + 250))/(C^2*((55/C)^B + 1)^2) + (114*B*(57/C)^(B - 1)*(D - 1)*((D - 1)/((57/C)^B + 1) - D + 300))/(C^2*((57/C)^B + 1)^2) + (120*B*(60/C)^(B - 1)*(D - 1)*((D - 1)/((60/C)^B + 1) - D + 350))/(C^2*((60/C)^B + 1)^2) + (124*B*(62/C)^(B - 1)*(D - 1)*((D - 1)/((62/C)^B + 1) - D + 450))/(C^2*((62/C)^B + 1)^2) + (134*B*(67/C)^(B - 1)*(D - 1)*((D - 1)/((67/C)^B + 1) - D + 500))/(C^2*((67/C)^B + 1)^2) + (138*B*(69/C)^(B - 1)*(D - 1)*((D - 1)/((69/C)^B + 1) - D + 550))/(C^2*((69/C)^B + 1)^2) + (146*B*(73/C)^(B - 1)*(D - 1)*((D - 1)/((73/C)^B + 1) - D + 600))/(C^2*((73/C)^B + 1)^2) + (148*B*(74/C)^(B - 1)*(D - 1)*((D - 1)/((74/C)^B + 1) - D + 650))/(C^2*((74/C)^B + 1)^2) + (158*B*(79/C)^(B - 1)*(D - 1)*((D - 1)/((79/C)^B + 1) - D + 750))/(C^2*((79/C)^B + 1)^2) + (164*B*(82/C)^(B - 1)*(D - 1)*((D - 1)/((82/C)^B + 1) - D + 800))/(C^2*((82/C)^B + 1)^2) + (174*B*(87/C)^(B - 1)*(D - 1)*((D - 1)/((87/C)^B + 1) - D + 845))/(C^2*((87/C)^B + 1)^2) + (178*B*(89/C)^(B - 1)*(D - 1)*((D - 1)/((89/C)^B + 1) - D + 901))/(C^2*((89/C)^B + 1)^2) + (184*B*(92/C)^(B - 1)*(D - 1)*((D - 1)/((92/C)^B + 1) - D + 955))/(C^2*((92/C)^B + 1)^2) + (190*B*(95/C)^(B - 1)*(D - 1)*((D - 1)/((95/C)^B + 1) - D + 1000))/(C^2*((95/C)^B + 1)^2) + (196*B*(98/C)^(B - 1)*(D - 1)*((D - 1)/((98/C)^B + 1) - D + 1060))/(C^2*((98/C)^B + 1)^2) + (204*B*(102/C)^(B - 1)*(D - 1)*((D - 1)/((102/C)^B + 1) - D + 1100))/(C^2*((102/C)^B + 1)^2) + (208*B*(104/C)^(B - 1)*(D - 1)*((D - 1)/((104/C)^B + 1) - D + 1150))/(C^2*((104/C)^B + 1)^2) + (220*B*(110/C)^(B - 1)*(D - 1)*((D - 1)/((110/C)^B + 1) - D + 1184))/(C^2*((110/C)^B + 1)^2) + (222*B*(111/C)^(B - 1)*(D - 1)*((D - 1)/((111/C)^B + 1) - D + 1230))/(C^2*((111/C)^B + 1)^2) + (232*B*(116/C)^(B - 1)*(D - 1)*((D - 1)/((116/C)^B + 1) - D + 1320))/(C^2*((116/C)^B + 1)^2) + (238*B*(119/C)^(B - 1)*(D - 1)*((D - 1)/((119/C)^B + 1) - D + 1350))/(C^2*((119/C)^B + 1)^2) + (244*B*(122/C)^(B - 1)*(D - 1)*((D - 1)/((122/C)^B + 1) - D + 1390))/(C^2*((122/C)^B + 1)^2) + (250*B*(125/C)^(B - 1)*(D - 1)*((D - 1)/((125/C)^B + 1) - D + 1441))/(C^2*((125/C)^B + 1)^2) + (264*B*(132/C)^(B - 1)*(D - 1)*((D - 1)/((132/C)^B + 1) - D + 1550))/(C^2*((132/C)^B + 1)^2);
g3= @(B,C,D) 2*(1/(0^B + 1) - 1)*((D - 1)/(0^B + 1) - D + 1) + 2*(1/((12/C)^B + 1) - 1)*((D - 1)/((12/C)^B + 1) - D + 11/2) + 2*(1/((24/C)^B + 1) - 1)*((D - 1)/((24/C)^B + 1) - D + 12) + 2*(1/((28/C)^B + 1) - 1)*((D - 1)/((28/C)^B + 1) - D + 20) + 2*(1/((34/C)^B + 1) - 1)*((D - 1)/((34/C)^B + 1) - D + 50) + 2*(1/((44/C)^B + 1) - 1)*((D - 1)/((44/C)^B + 1) - D + 100) + 2*(1/((49/C)^B + 1) - 1)*((D - 1)/((49/C)^B + 1) - D + 150) + 2*(1/((52/C)^B + 1) - 1)*((D - 1)/((52/C)^B + 1) - D + 200) + 2*(1/((55/C)^B + 1) - 1)*((D - 1)/((55/C)^B + 1) - D + 250) + 2*(1/((57/C)^B + 1) - 1)*((D - 1)/((57/C)^B + 1) - D + 300) + 2*(1/((60/C)^B + 1) - 1)*((D - 1)/((60/C)^B + 1) - D + 350) + 2*(1/((62/C)^B + 1) - 1)*((D - 1)/((62/C)^B + 1) - D + 450) + 2*(1/((67/C)^B + 1) - 1)*((D - 1)/((67/C)^B + 1) - D + 500) + 2*(1/((69/C)^B + 1) - 1)*((D - 1)/((69/C)^B + 1) - D + 550) + 2*(1/((73/C)^B + 1) - 1)*((D - 1)/((73/C)^B + 1) - D + 600) + 2*(1/((74/C)^B + 1) - 1)*((D - 1)/((74/C)^B + 1) - D + 650) + 2*(1/((79/C)^B + 1) - 1)*((D - 1)/((79/C)^B + 1) - D + 750) + 2*(1/((82/C)^B + 1) - 1)*((D - 1)/((82/C)^B + 1) - D + 800) + 2*(1/((87/C)^B + 1) - 1)*((D - 1)/((87/C)^B + 1) - D + 845) + 2*(1/((89/C)^B + 1) - 1)*((D - 1)/((89/C)^B + 1) - D + 901) + 2*(1/((92/C)^B + 1) - 1)*((D - 1)/((92/C)^B + 1) - D + 955) + 2*(1/((95/C)^B + 1) - 1)*((D - 1)/((95/C)^B + 1) - D + 1000) + 2*(1/((98/C)^B + 1) - 1)*((D - 1)/((98/C)^B + 1) - D + 1060) + 2*(1/((102/C)^B + 1) - 1)*((D - 1)/((102/C)^B + 1) - D + 1100) + 2*(1/((104/C)^B + 1) - 1)*((D - 1)/((104/C)^B + 1) - D + 1150) + 2*(1/((110/C)^B + 1) - 1)*((D - 1)/((110/C)^B + 1) - D + 1184) + 2*(1/((111/C)^B + 1) - 1)*((D - 1)/((111/C)^B + 1) - D + 1230) + 2*(1/((116/C)^B + 1) - 1)*((D - 1)/((116/C)^B + 1) - D + 1320) + 2*(1/((119/C)^B + 1) - 1)*((D - 1)/((119/C)^B + 1) - D + 1350) + 2*(1/((122/C)^B + 1) - 1)*((D - 1)/((122/C)^B + 1) - D + 1390) + 2*(1/((125/C)^B + 1) - 1)*((D - 1)/((125/C)^B + 1) - D + 1441) + 2*(1/((132/C)^B + 1) - 1)*((D - 1)/((132/C)^B + 1) - D + 1550);


%% fitting a line by using 3D gradient desecent

xstart = [30;30;2000];                                    % set start value
lambda = 0.000001;                                       % set lambda (update rate in gradient descent)
maxiterations = 500;                                     % set max number of iterations


x = zeros(3, maxiterations);    %create matrix for x
x(:,1) = xstart;                %set x0
k=0;


% Gradient descent: loop until limit of maxiterations is reached
while k < maxiterations
    k=k+1;
    % Calculate gradients for x1 & x2
    g(1,k) = g1(x(1,k), x(2,k), x(3,k));
    g(2,k) = g2(x(1,k), x(2,k), x(3,k));
    g(3,k) = g3(x(1,k), x(2,k), x(3,k));
    
    % Calculate new values for x1 & x2
    x(1,k+1) = (x(1,k)- lambda.*g(1,k));
    x(2,k+1) =(x(2,k)- lambda.*g(2,k));
    x(3,k+1) =(x(3,k)- lambda.*g(3,k));
    
    
%     Verify a procedure of fitting according to iterations.

    figure(1);
    % plot the original data
    plot(X,Y, 'r', 'linewidth', 1.5); hold on;                    
    
    % plot the sigmoid function with 3 parameters according to number of iteration
    B=x(1,k); C=x(2,k); D=x(3,k);
    x_r=[1:132];
    plot(x_r, D +  ((1- D)./(1+ (x_r./C).^B ))  ); hold on; 
    ylim([-1 1800]);
    title(['Fitting a line [3D] - number of iteration :' num2str(k)]);
    xlabel(['month']);
    ylabel(['number of members']);
    drawnow;
    pause(0.0001);

end;

 % decide 3 parameters
B=x(1,k+1); C=x(2,k+1); D=x(3,k+1);            

g_norm = sum(g(:,k).^2);

% final fitted sigmoid function
figure(2);
plot(X,Y, 'r', 'linewidth', 1.5); hold on;
x_r=[1:132];
plot(x_r, D +  ((1- D)./(1+ (x_r./C).^B )) ,'b','linewidth',1.5 ); hold on;
ylim([-1 1800]);
title(['Fitting a line by using 3D gradient descent']);
xlabel(['month']);
ylabel(['number of members']);


%% (b) 2D gradient descent

% Get a Loss function "f" (=Sum of squared errors for all data points)
f=0;
syms f B C                                                   % define f,B,C,D as symbolic variables
D=7000;                                                      % reduce parameter by define D
for k=1:32;                                                  % total number of months
    X_k=X(k); Y_k=Y(k);                                      % X and Y values according to k
    f= f + ((Y_k - (D + (1- D)./(1+  (X_k./C).^B ))).^2);    % sum of squared error for all data points
end


% Get three gradient descent funtions by using numerical differentiation
% As there exists 2 parameters to fit, we use a 2D gradient descent

% g1=diff(f,B,1); %dF/dB
% g2=diff(f,C,1); %dF/dC


% function "diff" is not defined with funtion_handdle
% Therefore it's impossible to get a numericla differentiation with function_handdle
% So I manually copy and paste the result of the numerical differentiation

f= @(B,C) (6999/(0^B + 1) - 6999)^2 + (6999/((132/C)^B + 1) - 5450)^2 + (6999/((125/C)^B + 1) - 5559)^2 + (6999/((122/C)^B + 1) - 5610)^2 + (6999/((119/C)^B + 1) - 5650)^2 + (6999/((116/C)^B + 1) - 5680)^2 + (6999/((111/C)^B + 1) - 5770)^2 + (6999/((110/C)^B + 1) - 5816)^2 + (6999/((104/C)^B + 1) - 5850)^2 + (6999/((102/C)^B + 1) - 5900)^2 + (6999/((98/C)^B + 1) - 5940)^2 + (6999/((95/C)^B + 1) - 6000)^2 + (6999/((92/C)^B + 1) - 6045)^2 + (6999/((89/C)^B + 1) - 6099)^2 + (6999/((87/C)^B + 1) - 6155)^2 + (6999/((82/C)^B + 1) - 6200)^2 + (6999/((79/C)^B + 1) - 6250)^2 + (6999/((74/C)^B + 1) - 6350)^2 + (6999/((73/C)^B + 1) - 6400)^2 + (6999/((69/C)^B + 1) - 6450)^2 + (6999/((67/C)^B + 1) - 6500)^2 + (6999/((62/C)^B + 1) - 6550)^2 + (6999/((60/C)^B + 1) - 6650)^2 + (6999/((57/C)^B + 1) - 6700)^2 + (6999/((55/C)^B + 1) - 6750)^2 + (6999/((52/C)^B + 1) - 6800)^2 + (6999/((49/C)^B + 1) - 6850)^2 + (6999/((44/C)^B + 1) - 6900)^2 + (6999/((34/C)^B + 1) - 6950)^2 + (6999/((28/C)^B + 1) - 6980)^2 + (6999/((24/C)^B + 1) - 6988)^2 + (6999/((12/C)^B + 1) - 13989/2)^2;
g1= @(B,C) - (13998*log(132/C)*(132/C)^B*(6999/((132/C)^B + 1) - 5450))/((132/C)^B + 1)^2 - (13998*log(125/C)*(125/C)^B*(6999/((125/C)^B + 1) - 5559))/((125/C)^B + 1)^2 - (13998*log(122/C)*(122/C)^B*(6999/((122/C)^B + 1) - 5610))/((122/C)^B + 1)^2 - (13998*log(119/C)*(119/C)^B*(6999/((119/C)^B + 1) - 5650))/((119/C)^B + 1)^2 - (13998*log(116/C)*(116/C)^B*(6999/((116/C)^B + 1) - 5680))/((116/C)^B + 1)^2 - (13998*log(111/C)*(111/C)^B*(6999/((111/C)^B + 1) - 5770))/((111/C)^B + 1)^2 - (13998*log(110/C)*(110/C)^B*(6999/((110/C)^B + 1) - 5816))/((110/C)^B + 1)^2 - (13998*log(104/C)*(104/C)^B*(6999/((104/C)^B + 1) - 5850))/((104/C)^B + 1)^2 - (13998*log(102/C)*(102/C)^B*(6999/((102/C)^B + 1) - 5900))/((102/C)^B + 1)^2 - (13998*log(98/C)*(98/C)^B*(6999/((98/C)^B + 1) - 5940))/((98/C)^B + 1)^2 - (13998*log(95/C)*(95/C)^B*(6999/((95/C)^B + 1) - 6000))/((95/C)^B + 1)^2 - (13998*log(92/C)*(92/C)^B*(6999/((92/C)^B + 1) - 6045))/((92/C)^B + 1)^2 - (13998*log(89/C)*(89/C)^B*(6999/((89/C)^B + 1) - 6099))/((89/C)^B + 1)^2 - (13998*log(87/C)*(87/C)^B*(6999/((87/C)^B + 1) - 6155))/((87/C)^B + 1)^2 - (13998*log(82/C)*(82/C)^B*(6999/((82/C)^B + 1) - 6200))/((82/C)^B + 1)^2 - (13998*log(79/C)*(79/C)^B*(6999/((79/C)^B + 1) - 6250))/((79/C)^B + 1)^2 - (13998*log(74/C)*(74/C)^B*(6999/((74/C)^B + 1) - 6350))/((74/C)^B + 1)^2 - (13998*log(73/C)*(73/C)^B*(6999/((73/C)^B + 1) - 6400))/((73/C)^B + 1)^2 - (13998*log(69/C)*(69/C)^B*(6999/((69/C)^B + 1) - 6450))/((69/C)^B + 1)^2 - (13998*log(67/C)*(67/C)^B*(6999/((67/C)^B + 1) - 6500))/((67/C)^B + 1)^2 - (13998*log(62/C)*(62/C)^B*(6999/((62/C)^B + 1) - 6550))/((62/C)^B + 1)^2 - (13998*log(60/C)*(60/C)^B*(6999/((60/C)^B + 1) - 6650))/((60/C)^B + 1)^2 - (13998*log(57/C)*(57/C)^B*(6999/((57/C)^B + 1) - 6700))/((57/C)^B + 1)^2 - (13998*log(55/C)*(55/C)^B*(6999/((55/C)^B + 1) - 6750))/((55/C)^B + 1)^2 - (13998*log(52/C)*(52/C)^B*(6999/((52/C)^B + 1) - 6800))/((52/C)^B + 1)^2 - (13998*log(49/C)*(49/C)^B*(6999/((49/C)^B + 1) - 6850))/((49/C)^B + 1)^2 - (13998*log(44/C)*(44/C)^B*(6999/((44/C)^B + 1) - 6900))/((44/C)^B + 1)^2 - (13998*log(24/C)*(24/C)^B*(6999/((24/C)^B + 1) - 6988))/((24/C)^B + 1)^2 - (13998*log(34/C)*(34/C)^B*(6999/((34/C)^B + 1) - 6950))/((34/C)^B + 1)^2 - (13998*log(28/C)*(28/C)^B*(6999/((28/C)^B + 1) - 6980))/((28/C)^B + 1)^2 - (13998*log(12/C)*(12/C)^B*(6999/((12/C)^B + 1) - 13989/2))/((12/C)^B + 1)^2;
g2= @(B,C) (1847736*B*(132/C)^(B - 1)*(6999/((132/C)^B + 1) - 5450))/(C^2*((132/C)^B + 1)^2) + (1749750*B*(125/C)^(B - 1)*(6999/((125/C)^B + 1) - 5559))/(C^2*((125/C)^B + 1)^2) + (1707756*B*(122/C)^(B - 1)*(6999/((122/C)^B + 1) - 5610))/(C^2*((122/C)^B + 1)^2) + (1665762*B*(119/C)^(B - 1)*(6999/((119/C)^B + 1) - 5650))/(C^2*((119/C)^B + 1)^2) + (1623768*B*(116/C)^(B - 1)*(6999/((116/C)^B + 1) - 5680))/(C^2*((116/C)^B + 1)^2) + (1553778*B*(111/C)^(B - 1)*(6999/((111/C)^B + 1) - 5770))/(C^2*((111/C)^B + 1)^2) + (1539780*B*(110/C)^(B - 1)*(6999/((110/C)^B + 1) - 5816))/(C^2*((110/C)^B + 1)^2) + (1455792*B*(104/C)^(B - 1)*(6999/((104/C)^B + 1) - 5850))/(C^2*((104/C)^B + 1)^2) + (1427796*B*(102/C)^(B - 1)*(6999/((102/C)^B + 1) - 5900))/(C^2*((102/C)^B + 1)^2) + (1371804*B*(98/C)^(B - 1)*(6999/((98/C)^B + 1) - 5940))/(C^2*((98/C)^B + 1)^2) + (1329810*B*(95/C)^(B - 1)*(6999/((95/C)^B + 1) - 6000))/(C^2*((95/C)^B + 1)^2) + (1287816*B*(92/C)^(B - 1)*(6999/((92/C)^B + 1) - 6045))/(C^2*((92/C)^B + 1)^2) + (1245822*B*(89/C)^(B - 1)*(6999/((89/C)^B + 1) - 6099))/(C^2*((89/C)^B + 1)^2) + (1217826*B*(87/C)^(B - 1)*(6999/((87/C)^B + 1) - 6155))/(C^2*((87/C)^B + 1)^2) + (1147836*B*(82/C)^(B - 1)*(6999/((82/C)^B + 1) - 6200))/(C^2*((82/C)^B + 1)^2) + (1105842*B*(79/C)^(B - 1)*(6999/((79/C)^B + 1) - 6250))/(C^2*((79/C)^B + 1)^2) + (1035852*B*(74/C)^(B - 1)*(6999/((74/C)^B + 1) - 6350))/(C^2*((74/C)^B + 1)^2) + (1021854*B*(73/C)^(B - 1)*(6999/((73/C)^B + 1) - 6400))/(C^2*((73/C)^B + 1)^2) + (965862*B*(69/C)^(B - 1)*(6999/((69/C)^B + 1) - 6450))/(C^2*((69/C)^B + 1)^2) + (937866*B*(67/C)^(B - 1)*(6999/((67/C)^B + 1) - 6500))/(C^2*((67/C)^B + 1)^2) + (867876*B*(62/C)^(B - 1)*(6999/((62/C)^B + 1) - 6550))/(C^2*((62/C)^B + 1)^2) + (839880*B*(60/C)^(B - 1)*(6999/((60/C)^B + 1) - 6650))/(C^2*((60/C)^B + 1)^2) + (797886*B*(57/C)^(B - 1)*(6999/((57/C)^B + 1) - 6700))/(C^2*((57/C)^B + 1)^2) + (769890*B*(55/C)^(B - 1)*(6999/((55/C)^B + 1) - 6750))/(C^2*((55/C)^B + 1)^2) + (727896*B*(52/C)^(B - 1)*(6999/((52/C)^B + 1) - 6800))/(C^2*((52/C)^B + 1)^2) + (685902*B*(49/C)^(B - 1)*(6999/((49/C)^B + 1) - 6850))/(C^2*((49/C)^B + 1)^2) + (615912*B*(44/C)^(B - 1)*(6999/((44/C)^B + 1) - 6900))/(C^2*((44/C)^B + 1)^2) + (475932*B*(34/C)^(B - 1)*(6999/((34/C)^B + 1) - 6950))/(C^2*((34/C)^B + 1)^2) + (335952*B*(24/C)^(B - 1)*(6999/((24/C)^B + 1) - 6988))/(C^2*((24/C)^B + 1)^2) + (391944*B*(28/C)^(B - 1)*(6999/((28/C)^B + 1) - 6980))/(C^2*((28/C)^B + 1)^2) + (167976*B*(12/C)^(B - 1)*(6999/((12/C)^B + 1) - 13989/2))/(C^2*((12/C)^B + 1)^2);



%% fitting a line by using 2D gradient desecent
% set values
xstart = [30;30];                                        % set start value
lambda = 0.0000001;                                      % set lambda (update rate in gradient descent)
maxiterations = 1000;                                    % set max number of iterations

x = zeros(2, maxiterations);    %create matrix for x
x(:,1) = xstart;                %set x0
k=0;


% Gradient descent: loop until limit of maxiterations is reached
while k < maxiterations
    k=k+1;
    % Calculate gradients for x1 & x2
    g(1,k) = g1(x(1,k), x(2,k));
    g(2,k) = g2(x(1,k), x(2,k));
    
    % Calculate new values for x1 & x2
    x(1,k+1) = (x(1,k)- lambda.*g(1,k));
    x(2,k+1) =(x(2,k)- lambda.*g(2,k));

    
    
%     Verify a procedure of fitting according to iterations.
%     
    figure(3);
    % plot the original data
    plot(X,Y, 'r', 'linewidth', 1.5); hold on;
    
    % plot the sigmoid function with 2 parameters according to number of iteration
    B=x(1,k); C=x(2,k); D=7000;
    x_r=[1:132];
    plot(x_r, D +  ((1- D)./(1+ (x_r./C).^B ))  ); hold on;
    ylim([-1 1800]);
    title(['Fitting a line [2D] - number of iteration :' num2str(k)]);
    xlabel(['month']);
    ylabel(['number of members']);

    drawnow;
    pause(0.0001);

end;

g_norm = sum(g(:,k).^2);

% final fitted sigmoid function
figure(4);
plot(X,Y, 'r', 'linewidth', 1.5); hold on;
x_r=[1:132];
B=x(1,k); C=x(2,k); D=7000;
plot(x_r, D +  ((1- D)./(1+ (x_r./C).^B )) ,'b', 'linewidth', 1.5 ); hold on;
ylim([-1 1800]);
title(['Fitting a line by using 2D gradient descent']);
xlabel(['month']);
ylabel(['number of members']);



%% Compare two solutions which use 3D and 2D gradient descent
% When we compare between two different fitted lines, 
% The distance between original data and the fitted line is much closer with
% a line which is fitted by 3D gradient descetn.
% It means squared error is much lower with line fitted by 3D gradient descent.
% From this we can conclude that 3D gradient descent fits the data better than 2D gradient descent.

% Then why 3D gradient descent is better?
% This is because 3D gradient descent can consider the effects of 3 parameters.
% With 3 parameters, the loss function is a cubic function.
% However with 2 parameters, the loss function is a quadratic function.
% As we minimize the squred error by using loss function, the cubic function
% works better to find a minimum point than the quadratic function.
% In this reason, 3D gradient descent is better than 2D.

% in terms of Local Minimum
% When we use the 2D gradient descetn, there's a limitation that it cannot change the value of D.
% This makes fitted line get far from the original data.
% Although gradient descetn can find local minimum, it can't find minimum.
% It means, with larger value of D, 2D gradient descent stuck in a local minimum.





